// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int     @id @default(autoincrement())
  walletAddress String  @unique
  username      String?
  bio           String?
  role          String  @default("USER") // 'USER' or 'ADMIN'
  profilePic    Bytes?

  artworks  Artwork[]
  approvals Approval[] // Track approvals by admin
}

model Artwork {
  id          Int     @id @default(autoincrement())
  ownerId     Int
  title       String
  description String
  imageCID    String // CID of the image in IPFS
  isApproved  Boolean @default(false)
  isMinted    Boolean @default(false)
  isSold      Boolean @default(false)
  price       Decimal @default(0.000) @db.Decimal(28, 8)

  owner       User         @relation(fields: [ownerId], references: [id])
  approval    Approval?
  marketplace Marketplace?
}

model Approval {
  id         Int      @id @default(autoincrement())
  artworkId  Int      @unique
  adminId    Int
  approvedAt DateTime @default(now())

  artwork Artwork @relation(fields: [artworkId], references: [id])
  admin   User    @relation(fields: [adminId], references: [id]) // Admin who approved the artwork
}

model Marketplace {
  id        Int @id @default(autoincrement())
  artworkId Int @unique
  tokenId   Int // Token ID of the minted NFT

  artwork Artwork @relation(fields: [artworkId], references: [id])
}
