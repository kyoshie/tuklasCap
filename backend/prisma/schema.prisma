// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  walletAddress String   @unique
  username      String?  @db.VarChar(15)
  bio           String?  @db.VarChar(128)
  role          String   @default("USER")
  profilePic    Bytes?
  createdAt     DateTime @default(now())

  artworks  Artwork[]
  approvals Approval[]
  Kyc       Kyc?
}

model Artwork {
  dbId        Int     @id @default(autoincrement())
  contractId  Int     @unique
  title       String  @db.VarChar(128)
  description String  @db.VarChar(128)
  imageCID    String
  price       Decimal @default(0.000) @db.Decimal(28, 18)

  isApproved      Boolean @default(false)
  isMinted        Boolean @default(false)
  isSold          Boolean @default(false)
  pendingApproval Boolean @default(false)

  transactionHash     String?
  mintTransactionHash String?

  createdAt  DateTime  @default(now())
  listedAt   DateTime?
  soldAt     DateTime?
  mintedAt   DateTime?
  approvedAt DateTime?

  ownerId     Int
  owner       User         @relation(fields: [ownerId], references: [id])
  approval    Approval?
  marketplace Marketplace?
  Sale        Sale[]
  isRejected  Boolean      @default(false)
  rejectedAt  DateTime?

  @@index([ownerId])
  @@index([pendingApproval])
  @@index([isApproved])
  @@index([contractId])
}

model Approval {
  id         Int       @id @default(autoincrement())
  artworkId  Int       @unique
  adminId    Int
  status     String    @default("pending")
  approvedAt DateTime?
  createdAt  DateTime  @default(now())
  reason     String?

  artwork    Artwork   @relation(fields: [artworkId], references: [dbId])
  admin      User      @relation(fields: [adminId], references: [id])
  rejectedAt DateTime?

  @@index([adminId])
  @@index([status])
}

model Marketplace {
  id        Int      @id @default(autoincrement())
  artworkId Int      @unique
  tokenId   Int
  price     Decimal  @db.Decimal(28, 18)
  status    String   @default("LISTED")
  listedAt  DateTime @default(now())

  artwork Artwork @relation(fields: [artworkId], references: [dbId])

  @@index([tokenId])
  @@index([price])
  @@index([status])
}

model Sale {
  id              Int      @id @default(autoincrement())
  artworkId       Int
  buyerAddress    String
  price           Decimal  @db.Decimal(28, 18)
  transactionHash String
  soldAt          DateTime @default(now())

  artwork Artwork @relation(fields: [artworkId], references: [dbId])

  @@index([artworkId])
  @@index([buyerAddress])
}

model Kyc {
  id              Int       @id @default(autoincrement())
  firstName       String    @db.VarChar(30)
  middleName      String    @db.VarChar(30)
  lastName        String    @db.VarChar(30)
  birthDate       DateTime
  birthPlace      String    @db.VarChar(128)
  address         String    @db.VarChar(256)
  validIdPhoto    Bytes
  status          String    @default("pending")
  rejectionReason String?
  submittedAt     DateTime  @default(now())
  approvedAt      DateTime?
  isApproved      Boolean   @default(false)
  isRejected      Boolean   @default(false)
  gender          String?   @db.VarChar(10)
  municipality    String?   @db.VarChar(30)
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])

  @@index([status])
}
